{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAAe,I,kBCGFA,EAAO,SAAAC,GAAK,OAKjB,cAHA,CAGA,OAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,YCLjBC,G,MAAW,SAAAR,GAExB,OAAO,sBAAKC,UAAU,YAAf,eAEHD,EAAMS,SAASC,KACb,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,YCLxBM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAGrC,OAEI,uBAAOC,KAAK,SAASF,YAAcA,EAAcX,UAAU,SACzDc,SAAUF,MCgDLG,E,kDApDb,aAAe,IAAD,8BACZ,gBAqBFH,aAAe,SAAAI,GAEb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SArBrC,EAAKC,MAAQ,CAEXb,SAAU,GACVU,YAAa,IANH,E,qDAUd,WAAqB,IAAD,OAIlBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAW7C,WAEE,MAAiCC,KAAKN,MAA9Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OAGE,cAFA,CAEA,OAAK9B,UAAU,MAAf,UAEE,kDACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAgBe,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,EAApB,sB,GA9CUI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b460dffa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n   \r\n        //we receive each monster in props from cardlist component,\r\n        //then display them in a card here\r\n\r\n        <div className='card-container'>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set4&size=180x180`} />\r\n            <h2> {props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n);\r\n\r\n\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n//the card-list component displays the cards in a grid pattern\r\n\r\nexport const CardList = props => {\r\n\r\nreturn <div className='card-list'>  {\r\n    //send each monster from the props we get from app, to the card component\r\n    props.monsters.map(\r\n      monster => (<Card key={monster.id} monster={monster} />)\r\n      )\r\n  }\r\n</div>;\r\n}","import React from 'react'\r\nimport './search-box.styles.css';\r\n\r\n//this searchbox component is reusable as it receives the functionality and placeholder\r\n//- from the app.js \r\n//this allows state to be changed in app.js so that other components can see it\r\nexport const SearchBox = ({ placeholder, handleChange }) => {\r\n     {/*  e is the event, target is the html element that fired the event */}\r\n\r\n    return (\r\n       \r\n        <input type='search' placeholder={ placeholder } className='search'\r\n          onChange={handleChange}\r\n            />\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport react, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport  { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();  //this calls the constructor method on Component, giving us access to state\n    //setting default value for our state\n    this.state = {\n\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n\n    //retrieve monsters as random key (users) \n\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  //declaring a function as an arrow function allows it to be automatically bound in the context\n  // - in which it is defined. so we do not have to define the binding inconstructor\n\n  handleChange = e => {\n  \n    this.setState({searchField: e.target.value});\n  };\n\n  render() {\n\n    const { monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return (\n      //the state is passed down the tree, as props\n\n      <div className=\"App\">\n       \n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n        placeholder='search monsters'\n        handleChange = {this.handleChange} \n        />\n        <CardList monsters={filteredMonsters}> {/* send monsters prop to cardlist. initially we passed this.state.monsters */}\n\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}